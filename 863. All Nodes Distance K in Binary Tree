class Solution {
public:
    void graph(TreeNode* root,unordered_map<TreeNode*,vector<TreeNode*>> &m)
    {
        if(!root)
             return ;
        if(root->left)
        {
            m[root->left].push_back(root);
            m[root].push_back(root->left);
            graph(root->left,m);
        }
        if(root->right)
        {
            m[root->right].push_back(root);
            m[root].push_back(root->right);
            graph(root->right,m);
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* tar, int k) {
        unordered_map<TreeNode*,vector<TreeNode*>> m;
        graph(root,m);
        unordered_set<TreeNode*> s;
        queue<TreeNode*> q;
        q.push(tar);
        s.insert(tar);
        vector<int> res;
        if(k==0)
             return {tar->val};
        while(q.size())
        {
            k--;
            
            int t = q.size();
            
            while(t--)
            {
                auto a = q.front(); q.pop();
                
                for(auto &i : m[a])
                {
                    if(s.find(i)==s.end())
                    {
                        s.insert(i);
                        q.push(i);
                    }
                }
            }
            
            if(k==0)
                 break;
        }
        
        while(q.size())
        {
            res.push_back(q.front()->val);
            q.pop();
        }
      return res;
    }
};
