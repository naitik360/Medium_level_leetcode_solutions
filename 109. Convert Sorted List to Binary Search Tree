/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     TreeNode* find(ListNode* &head,int n)
   {
     if(n<=0)
       return NULL;

     TreeNode* lft = find(head,n/2);
    
     TreeNode* root = new TreeNode(head->val);

     head=head->next;

     TreeNode* rght = find(head,n-n/2-1);
    
     root->left = lft;
     root->right = rght;

      return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        if(!head)
      return NULL;
      int n=0;
      ListNode* k = head;

      while(k)
      {
        n++;
        k=k->next;
      }

      return find(head,n);
    }
};
