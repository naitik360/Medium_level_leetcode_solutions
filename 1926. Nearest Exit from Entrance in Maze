class Solution{
public:
    int nearestExit(vector<vector<char>>& v, vector<int>& s){
        if(v[s[0]][s[1]]=='+')
             return -1;
        vector<int> d{0,-1,0,1,0};
        set<pair<int,int>> k;
        k.insert({s[0],s[1]});
        queue<pair<int,int>> q;
        q.push({s[0],s[1]});
        int ans=1;

        while(q.size())
        {
            int sz = q.size();
            while(sz--)
            {
                auto p = q.front(); q.pop();
                
                for(int i=0;i<4;i++)
                {
                    int nx = p.first+d[i];
                    int ny = p.second + d[i+1];
                    
                    if(nx<0 || nx>=v.size() || ny<0 || ny>=v[0].size() || k.find({nx,ny})!=k.end() || v[nx][ny]=='+')
                          continue;
                    if(nx==0 || nx==v.size()-1 || ny==0 || ny==v[0].size()-1)
                          return ans;
                    q.push({nx,ny});
                    k.insert({nx,ny});
                }
            }
            ans++;
        }
      return -1;
    }
};
