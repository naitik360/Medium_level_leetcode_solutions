class Solution {
public:
    vector<vector<int>> highestRankedKItems(vector<vector<int>>& v, vector<int>& c, vector<int>& s, int dist){
        vector<int> d{0,-1,0,1,0};
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> res;
        set<pair<int,int>> k;
        k.insert({s[0],s[1]});
        queue<pair<int,int>> q;
        q.push({s[0],s[1]});
        int ans=1;
        if(v[s[0]][s[1]]>=c[0] && v[s[0]][s[1]]<=c[1])
        {
            res.push({0,v[s[0]][s[1]],s[0],s[1]});
        }
        while(q.size())
        {
            int sz = q.size();
            while(sz--)
            {
                auto p = q.front(); q.pop();
                
                for(int i=0;i<4;i++)
                {
                    int nx = p.first+d[i];
                    int ny = p.second + d[i+1];
                    
                    if(nx<0 || nx>=v.size() || ny<0 || ny>=v[0].size() || v[nx][ny]==0  ||k.find({nx,ny})!=k.end() )
                          continue;
                    if(v[nx][ny]==1 || v[nx][ny]<c[0] || v[nx][ny]>c[1])
                    {
                        q.push({nx,ny});
                        k.insert({nx,ny});
                    }
                    else
                    {
                        res.push({ans,v[nx][ny],nx,ny});
                        q.push({nx,ny});
                        k.insert({nx,ny});
                    }
                }
            }
            ans++;
        }
        vector<vector<int>> vec;
        while(res.size())
        {
            vector<int> a = res.top(); res.pop();
            vec.push_back({a[2],a[3]});
        }
        
        while(vec.size()>dist)
        {
            vec.pop_back();
        }
       return vec;
    }
};
